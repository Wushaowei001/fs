#
# This SConstruct file is automatically moved to the directory where the generated 
# instance-specific problem data resides during the process of generating the executable solver.
#

import os

HOME = os.path.expanduser("~")

# read variables from the cache, a user's custom.py file or command line arguments
vars = Variables(['variables.cache', 'custom.py'], ARGUMENTS)
vars.Add(BoolVariable('debug', 'Whether this is a debug build', 'no'))
vars.Add(PathVariable('lapkt', 'Path where the LAPKT library is installed', os.getenv('LWAPTKDEV', ''), PathVariable.PathIsDir))
vars.Add(PathVariable('fs0', 'Path where the FS0 library is installed', os.getenv('FS0_PATH', ''), PathVariable.PathIsDir))

def which(program):
	""" Helper function emulating unix 'which' command """
	for path in os.environ["PATH"].split(os.pathsep):
		path = path.strip('"')
		exe_file = os.path.join(path, program)
		if os.path.isfile(exe_file) and os.access(exe_file, os.X_OK):
			return exe_file
	return None

env = Environment(variables=vars, ENV=os.environ, CXX='clang' if which('clang') else 'g++')

env.Append( CCFLAGS = ['-Wall', '-pedantic', '-std=c++0x' ] )  # Flags common to all options
env.Append( LINKFLAGS = ['-lstdc++' ] )  # Seems to be necessary to avoid compatibility issues at linking time...

if env['debug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG' ] )
	fs0_libname = 'fs0-debug'
	exe_name = 'solver-debug.bin'
else:
	env.Append( CCFLAGS = ['-O3', '-DNDEBUG' ] )
	fs0_libname = 'fs0'
	exe_name = 'solver.bin'


include_paths = ['.',
				 env['fs0'] + '/src',
				 env['lapkt'] + '/include',
                 env['lapkt'] + '/interfaces/agnostic',
                ]

lib_paths = [env['fs0'] + '/lib']

# If we have a local libs on the home directory, use them.
if os.path.exists(HOME + '/local/lib'):
    lib_paths.append(HOME + '/local/lib')
if os.path.exists(HOME + '/local/include'):
    include_paths.append(HOME + '/local/include')
    
env.Append(CPPPATH = [ os.path.abspath(p) for p in include_paths ])

src_objs = [ env.Object(s) for s in Glob('./*.cxx') ] # This will include both the main.cxx and the generated code for the particular instance

env.Append(LIBS=['boost_program_options', 'boost_serialization', 'boost_regex', fs0_libname])
env.Append(LIBPATH=[ os.path.abspath(p) for p in lib_paths ])

env.Program(exe_name, src_objs )
