/*
Lightweight Automated Planning Toolkit
Copyright (C) 2012
Miquel Ramirez <miquel.ramirez@rmit.edu.au>
Nir Lipovetzky <nirlipo@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "symbol_extensions.hxx"

namespace aptk { namespace core {

	
const ObjectSet PredicateExtension::OBJECTSET_TRUE = {(unsigned) true};
const ObjectSet PredicateExtension::OBJECTSET_FALSE = {(unsigned) false};
	
	
//! These are necessary for Boost.Functional/Hash to know how to hash pointers.
std::size_t hash_value(const std::shared_ptr<SymbolExtension>& ext) { return ext->hash(); }

std::ostream& SymbolExtension::print(std::ostream& os) const {
	os << "Ext[(card=" << mapping.size() << "){";
	for (const auto& elem:mapping) {
		os << "<";
		for (const ObjectIdx idx:elem.first){
			os << idx << ",";
		}
		os << ">: {";
		for (ObjectIdx e:elem.second) {
			os << e << ",";
		}
		os << " };";
	}
	os << "}]";
	return os;
}

std::ostream& SymbolExtension::print(std::ostream& os, const SymbolTable& st) const {
	os << "Ext[(card=" << mapping.size() << "){";
	for (const auto& elem:mapping) {
		os << "<";
		for (const ObjectIdx idx:elem.first){
			os << st.getObjectName(idx) << ",";
		}
		os << ">: {";
		for (ObjectIdx e:elem.second) {
			os << st.getObjectName(e) << ",";
		}
		os << " };";
	}
	os << "}]";
	return os;
}

} } // namespaces
